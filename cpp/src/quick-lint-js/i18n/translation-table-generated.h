// Code generated by tools/compile-translations.go. DO NOT EDIT.
// source: po/*.po

// Copyright (C) 2020  Matthew "strager" Glazar
// See end of file for extended copyright information.

#ifndef QUICK_LINT_JS_I18N_TRANSLATION_TABLE_GENERATED_H
#define QUICK_LINT_JS_I18N_TRANSLATION_TABLE_GENERATED_H

#include <cstddef>
#include <cstdint>
#include <iterator>
#include <quick-lint-js/assert.h>
#include <quick-lint-js/container/sorted-search.h>
#include <quick-lint-js/i18n/translation-table.h>
#include <string_view>

namespace quick_lint_js {
using namespace std::literals::string_view_literals;

constexpr std::uint32_t translation_table_locale_count = 5;
constexpr std::uint16_t translation_table_mapping_table_size = 53;
constexpr std::size_t translation_table_string_table_size = 10199;
constexpr std::size_t translation_table_locale_table_size = 35;

consteval std::uint16_t translation_table_const_look_up(
    std::string_view untranslated) {
  // clang-format off
  constexpr std::string_view const_lookup_table[] = {
          "'>' is not allowed directly in JSX text; write {{'>'} or &gt; instead"sv,
          "'do-while' loop"sv,
          "'for' loop"sv,
          "'if' statement"sv,
          "'while' loop"sv,
          "'with' statement"sv,
          "'{0}' is not allowed for strings; use {1} instead"sv,
          "'}' is not allowed directly in JSX text; write {{'}'} instead"sv,
          "BigInt literal contains decimal point"sv,
          "BigInt literal contains exponent"sv,
          "RegExp literal flags cannot contain Unicode escapes"sv,
          "a 'do-while' loop"sv,
          "a 'for' loop"sv,
          "a 'while' loop"sv,
          "a 'with' statement"sv,
          "a labelled statement"sv,
          "an 'if' statement"sv,
          "binary number literal has no digits"sv,
          "character is not allowed in identifiers"sv,
          "code point in Unicode escape sequence must not be greater than U+10FFFF"sv,
          "code point out of range"sv,
          "escaped character is not allowed in identifiers"sv,
          "escaping '-' is not allowed in tag names; write '-' instead"sv,
          "expected hexadecimal digits in Unicode escape sequence"sv,
          "hex number literal has no digits"sv,
          "integer cannot be represented and will be rounded to '{1}'"sv,
          "invalid UTF-8 sequence"sv,
          "invalid hex escape sequence: {0}"sv,
          "keywords cannot contain escape sequences"sv,
          "labelled statement"sv,
          "legacy octal literal may not be BigInt"sv,
          "legacy octal literals may not contain underscores"sv,
          "number literal contains consecutive underscores"sv,
          "number literal contains trailing underscore(s)"sv,
          "octal literal may not have decimal"sv,
          "octal literal may not have exponent"sv,
          "octal number literal has no digits"sv,
          "unclosed block comment"sv,
          "unclosed identifier escape sequence"sv,
          "unclosed regexp literal"sv,
          "unclosed string literal"sv,
          "unclosed template"sv,
          "unexpected '#'"sv,
          "unexpected '@'"sv,
          "unexpected '\\' in identifier"sv,
          "unexpected characters in binary literal"sv,
          "unexpected characters in hex literal"sv,
          "unexpected characters in number literal"sv,
          "unexpected characters in octal literal"sv,
          "unexpected control character"sv,
          "unicode byte order mark (BOM) cannot appear before #! at beginning of script"sv,
          "unopened block comment"sv,
  };
  // clang-format on

  auto it = sorted_search(std::begin(const_lookup_table),
                          std::end(const_lookup_table), untranslated);
  if (it != std::end(const_lookup_table)) {
    return std::uint16_t((it - std::begin(const_lookup_table)) + 1);
  }

  // If you see an error with the following line, translation-table-generated.h
  // is out of date. Run tools/update-translator-sources to rebuild this file.
  QLJS_CONSTEXPR_ASSERT(false);

  return 0;
}
}

#endif

// quick-lint-js finds bugs in JavaScript programs.
// Copyright (C) 2020  Matthew "strager" Glazar
//
// This file is part of quick-lint-js.
//
// quick-lint-js is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// quick-lint-js is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with quick-lint-js.  If not, see <https://www.gnu.org/licenses/>.
